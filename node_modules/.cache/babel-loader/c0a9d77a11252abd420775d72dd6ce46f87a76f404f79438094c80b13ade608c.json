{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wanda\\\\OneDrive\\\\Desktop\\\\Projects\\\\Investment Calculator React\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport Header from './components/Header/Header';\nimport Form from './components/UserInput/Form';\nimport Table from './components/Table/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = userInput => {\n    const yearlyData = []; // per-year results\n\n    let currentSavings = userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = userInput['expected-return'] / 100;\n    const duration = userInput[duration];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        totalSavings: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    console.log(yearlyData);\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onPullUserInput: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      items: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","Form","Table","jsxDEV","_jsxDEV","App","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","totalSavings","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onPullUserInput","items","_c","$RefreshReg$"],"sources":["C:/Users/wanda/OneDrive/Desktop/Projects/Investment Calculator React/src/App.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport Header from './components/Header/Header';\nimport Form from './components/UserInput/Form';\nimport Table from './components/Table/Table';\n\n\nfunction App() {\n  const calculateHandler = (userInput) => {\n    \n    const yearlyData = []; // per-year results\n  \n    let currentSavings = userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = userInput['expected-return'] / 100;\n    const duration = userInput[duration];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        totalSavings: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    console.log(yearlyData);\n    // do something with yearlyData ...\n  };\n  return (\n    <div>\n      <Header />\n      <Form onPullUserInput={calculateHandler} /> \n     \n      <Table items={yearlyData}/>\n     \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,KAAK,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG7C,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IAEtC,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAGF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACnD,MAAMG,kBAAkB,GAAGH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC7D,MAAMI,cAAc,GAAGJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IACzD,MAAMK,QAAQ,GAAGL,SAAS,CAACK,QAAQ,CAAC;;IAEpC;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,YAAY,EAAER,cAAc;QAC5BC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAQ,OAAO,CAACC,GAAG,CAACX,UAAU,CAAC;IACvB;EACF,CAAC;;EACD,oBACEJ,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACJ,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVpB,OAAA,CAACH,IAAI;MAACwB,eAAe,EAAEnB;IAAiB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE3CpB,OAAA,CAACF,KAAK;MAACwB,KAAK,EAAElB;IAAW;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAExB,CAAC;AAEV;AAACG,EAAA,GAlCQtB,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}